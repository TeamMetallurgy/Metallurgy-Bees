buildscript {
    repositories {
        mavenCentral()
		    mavenLocal() 
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        
         maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "Team Metallurgy Maven"
        url = "http://shadow.gcod.net/maven"
    }
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven"
    }
	maven {
        name = "Player's Maven"
        url = "http://maven.ic2.player.to/"
    }
}
apply plugin: 'forge'

version = "0.1.4"
group= "elcon.mods.metallurgybees" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MetallurgyBees"

ext.configFile = file "build.properties"
 
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
 
minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
}
 
dependencies {
    compile "com.teammetallurgy:Metallurgy:${config.minecraft_version}-${config.metallurgy_version}:deobf"
    compile "net.sengir.forestry:forestry_${config.minecraft_version}:${config.forestry_version}:api"
}
 
task buildInfo() {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "${project.buildInfo.revision}"
    }
}

ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}

if(System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url : "file:///var/www/html/maven")
        }
    }
}
